// Generated by TinyPG v1.3 available at www.codeproject.com

namespace TinyPG.Compiler
{
    using System.Collections.Generic;
    using System.Globalization;
    using System.Text.RegularExpressions;

    public class Scanner
    {
        private readonly TokenType _fileAndLine;
        private readonly Dictionary<TokenType, Regex> _patterns;

        /// <summary>
        /// Tokens to be skipped
        /// </summary>
        private readonly List<TokenType> _skipList;

        private readonly List<TokenType> _tokens;
        private int _currentColumn;
        private string _currentFile;
        private int _currentLine;
        private int _currentPosition;
        private int _endPos;
        private string _input;

        private Token _lookAheadToken;

        private int _startPos;

        public Scanner()
        {
            this._patterns = new Dictionary<TokenType, Regex>();
            this._tokens = new List<TokenType>();
            this._lookAheadToken = null;
            this.Skipped = new List<Token>();

            this._skipList = new List<TokenType>();
            this._skipList.Add(TokenType.WHITESPACE);
            this._skipList.Add(TokenType.COMMENTLINE);
            this._skipList.Add(TokenType.COMMENTBLOCK);

            var regex = new Regex(@"\(", RegexOptions.Compiled);
            this._patterns.Add(TokenType.BRACKETOPEN, regex);
            this._tokens.Add(TokenType.BRACKETOPEN);

            regex = new Regex(@"\)", RegexOptions.Compiled);
            this._patterns.Add(TokenType.BRACKETCLOSE, regex);
            this._tokens.Add(TokenType.BRACKETCLOSE);

            regex = new Regex(@"\{[^\}]*\}([^};][^}]*\}+)*;", RegexOptions.Compiled);
            this._patterns.Add(TokenType.CODEBLOCK, regex);
            this._tokens.Add(TokenType.CODEBLOCK);

            regex = new Regex(@",", RegexOptions.Compiled);
            this._patterns.Add(TokenType.COMMA, regex);
            this._tokens.Add(TokenType.COMMA);

            regex = new Regex(@"\[", RegexOptions.Compiled);
            this._patterns.Add(TokenType.SQUAREOPEN, regex);
            this._tokens.Add(TokenType.SQUAREOPEN);

            regex = new Regex(@"\]", RegexOptions.Compiled);
            this._patterns.Add(TokenType.SQUARECLOSE, regex);
            this._tokens.Add(TokenType.SQUARECLOSE);

            regex = new Regex(@"=", RegexOptions.Compiled);
            this._patterns.Add(TokenType.ASSIGN, regex);
            this._tokens.Add(TokenType.ASSIGN);

            regex = new Regex(@"\|", RegexOptions.Compiled);
            this._patterns.Add(TokenType.PIPE, regex);
            this._tokens.Add(TokenType.PIPE);

            regex = new Regex(@";", RegexOptions.Compiled);
            this._patterns.Add(TokenType.SEMICOLON, regex);
            this._tokens.Add(TokenType.SEMICOLON);

            regex = new Regex(@"(\*|\+|\?)", RegexOptions.Compiled);
            this._patterns.Add(TokenType.UNARYOPER, regex);
            this._tokens.Add(TokenType.UNARYOPER);

            regex = new Regex(@"[a-zA-Z_][a-zA-Z0-9_]*", RegexOptions.Compiled);
            this._patterns.Add(TokenType.IDENTIFIER, regex);
            this._tokens.Add(TokenType.IDENTIFIER);

            regex = new Regex(@"[0-9]+", RegexOptions.Compiled);
            this._patterns.Add(TokenType.INTEGER, regex);
            this._tokens.Add(TokenType.INTEGER);

            regex = new Regex(@"[0-9]*\.[0-9]+", RegexOptions.Compiled);
            this._patterns.Add(TokenType.DOUBLE, regex);
            this._tokens.Add(TokenType.DOUBLE);

            regex = new Regex(@"(0x[0-9a-fA-F]{6})", RegexOptions.Compiled);
            this._patterns.Add(TokenType.HEX, regex);
            this._tokens.Add(TokenType.HEX);

            regex = new Regex(@"->", RegexOptions.Compiled);
            this._patterns.Add(TokenType.ARROW, regex);
            this._tokens.Add(TokenType.ARROW);

            regex = new Regex(@"<%\s*@", RegexOptions.Compiled);
            this._patterns.Add(TokenType.DIRECTIVEOPEN, regex);
            this._tokens.Add(TokenType.DIRECTIVEOPEN);

            regex = new Regex(@"%>", RegexOptions.Compiled);
            this._patterns.Add(TokenType.DIRECTIVECLOSE, regex);
            this._tokens.Add(TokenType.DIRECTIVECLOSE);

            regex = new Regex(@"^$", RegexOptions.Compiled);
            this._patterns.Add(TokenType.EOF, regex);
            this._tokens.Add(TokenType.EOF);

            regex = new Regex(@"@?\""(\""\""|[^\""])*\""", RegexOptions.Compiled);
            this._patterns.Add(TokenType.STRING, regex);
            this._tokens.Add(TokenType.STRING);

            regex = new Regex(@"\s+", RegexOptions.Compiled);
            this._patterns.Add(TokenType.WHITESPACE, regex);
            this._tokens.Add(TokenType.WHITESPACE);

            regex = new Regex(@"//[^\n]*\n?", RegexOptions.Compiled);
            this._patterns.Add(TokenType.COMMENTLINE, regex);
            this._tokens.Add(TokenType.COMMENTLINE);

            regex = new Regex(@"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/", RegexOptions.Compiled);
            this._patterns.Add(TokenType.COMMENTBLOCK, regex);
            this._tokens.Add(TokenType.COMMENTBLOCK);


        }

        /// <summary>
        /// Tokens that have been skipped
        /// </summary>
        public List<Token> Skipped { get; private set; }
        public Token GetToken(TokenType type)
        {
            Token t = new Token(this._startPos, this._endPos);
            t.Type = type;
            return t;
        }

        public void Init(string input, string fileName = "")
        {
            this._input = input;
            this._startPos = 0;
            this._endPos = 0;
            this._currentFile = fileName;
            this._currentLine = 1;
            this._currentColumn = 1;
            this._currentPosition = 0;
            this._lookAheadToken = null;
        }
        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedtokens)
        {
            int i;
            int startpos = this._startPos;
            int endpos = this._endPos;
            int currentline = this._currentLine;
            string currentFile = this._currentFile;
            Token tok = null;
            List<TokenType> scantokens;


            // this prevents double scanning and matching
            // increased performance
            if (this._lookAheadToken != null
                && this._lookAheadToken.Type != TokenType._UNDETERMINED_
                && this._lookAheadToken.Type != TokenType._NONE_) return this._lookAheadToken;

            // if no scantokens specified, then scan for all of them (= backward compatible)
            if (expectedtokens.Length == 0)
                scantokens = this._tokens;
            else
            {
                scantokens = new List<TokenType>(expectedtokens);
                scantokens.AddRange(this._skipList);
            }

            do
            {

                int len = -1;
                TokenType index = (TokenType)int.MaxValue;
                string input = this._input.Substring(startpos);

                tok = new Token(startpos, endpos);

                for (i = 0; i < scantokens.Count; i++)
                {
                    Regex r = this._patterns[scantokens[i]];
                    Match m = r.Match(input);
                    if (m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len)))
                    {
                        len = m.Length;
                        index = scantokens[i];
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startpos + len;
                    tok.Text = this._input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos == tok.EndPos)
                {
                    if (tok.StartPos < this._input.Length)
                        tok.Text = this._input.Substring(tok.StartPos, 1);
                    else
                        tok.Text = "EOF";
                }

                // Update the line and column count for error reporting.
                tok.File = currentFile;
                tok.Line = currentline;
                if (tok.StartPos < this._input.Length)
                    tok.Column = tok.StartPos - this._input.LastIndexOf('\n', tok.StartPos);

                if (this._skipList.Contains(tok.Type))
                {
                    startpos = tok.EndPos;
                    endpos = tok.EndPos;
                    currentline = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
                    currentFile = tok.File;
                    this.Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = this.Skipped; // assign prior skips to this token
                    this.Skipped = new List<Token>(); //reset skips
                }

                // Check to see if the parsed token wants to 
                // alter the file and line number.
                if (tok.Type == this._fileAndLine)
                {
                    var match = this._patterns[tok.Type].Match(tok.Text);
                    var fileMatch = match.Groups["File"];
                    if (fileMatch.Success)
                        currentFile = fileMatch.Value.Replace("\\\\", "\\");
                    var lineMatch = match.Groups["Line"];
                    if (lineMatch.Success)
                        currentline = int.Parse(lineMatch.Value, NumberStyles.Integer, CultureInfo.InvariantCulture);
                }
            }
            while (this._skipList.Contains(tok.Type));

            this._lookAheadToken = tok;
            return tok;
        }

        /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedtokens)
        {
            Token tok = this.LookAhead(expectedtokens); // temporarely retrieve the lookahead
            this._lookAheadToken = null; // reset lookahead token, so scanning will continue
            this._startPos = tok.EndPos;
            this._endPos = tok.EndPos; // set the tokenizer to the new scan position
            this._currentLine = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
            this._currentFile = tok.File;
            return tok;
        }
    }
}
