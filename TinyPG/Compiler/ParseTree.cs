// Generated by TinyPG v1.3 available at www.codeproject.com

namespace TinyPG.Compiler
{
    using System;
    using System.Collections.Generic;
    using System.Text;

    // rootlevel of the node tree
    [Serializable]
    public class ParseTree : ParseNode
    {
        public ParseErrors Errors { get; private set; }

        public List<Token> Skipped { get; set; }

        public ParseTree() : base(new Token(), "ParseTree")
        {
            this.Token.Type = TokenType.Start;
            this.Token.Text = "Root";
            this.Errors = new ParseErrors();
        }

        public string PrintTree()
        {
            var sb = new StringBuilder();
            var indent = 0;
            this.PrintNode(sb, this, indent);
            return sb.ToString();
        }

        private void PrintNode(StringBuilder sb, ParseNode node, int indent)
        {           
            var space = "".PadLeft(indent, ' ');

            sb.Append(space);
            sb.AppendLine(node.Text);

            foreach (var n in node.Nodes)
                this.PrintNode(sb, n, indent + 2);
        }
        
        /// <summary>
        /// this is the entry point for executing and evaluating the parse tree.
        /// </summary>
        /// <param name="paramlist">additional optional input parameters</param>
        /// <returns>the output of the evaluation function</returns>
        public object Eval(params object[] paramlist)
        {
            return this.Nodes[0].Eval(this, paramlist);
        }
    }
}
